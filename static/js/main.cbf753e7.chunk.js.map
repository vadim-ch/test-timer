{"version":3,"sources":["view/components/common/button/index.tsx","view/containers/timer/elements.tsx","store/reducers/service-worker/index.ts","store/reducers/timer/index.ts","store/reducers/index.ts","store/index.ts","view/containers/timer/index.tsx","store/reducers/timer/selectors.ts","view/components/common/elements.tsx","store/actions/change-interval.ts","utils/index.ts","view/app.tsx","view/components/common/button/elements.tsx","view/elements.tsx","store/actions/sw-update.ts","store/reducers/service-worker/selectors.ts","view lazy /^/.//.*$/ groupOptions: {} namespace object","serviceWorker.ts","index.tsx"],"names":["Button","React","memo","color","children","onClick","disabled","type","TimerBox","styled","div","TimerContainer","StopwatchBox","StopwatchValue","span","SpinnerContainer","initialState","registration","value","reducers","timer","state","action","CHANGE_INTERVAL","payload","sw","SW_UPDATE","reducer","combineReducers","store","createStore","timerId","getCurrentInterval","getTimerState","Interval","loadableWithCatchError","Timer","currentInterval","increaseInterval","decreaseInterval","useState","currentTime","setCurrentTime","startTime","setStartTime","isIntervalVisible","setVisible","isControlAvailable","isStarted","showInterval","useCallback","handleTick","getSecondsDifferenceOfDate","handleStart","Date","now","startTimer","setTimeout","clearTimeout","handleStop","useEffect","Suspense","fallback","height","width","timeout","connect","dispatch","changeInterval","ButtonGroup","IntervalTitle","IntervalValue","date","diff","Math","floor","path","lazy","a","waitingRegistration","getWaitingRegistration","getState","updateApp","postMessage","addEventListener","e","target","window","location","reload","App","element","document","onIdle","debounce","ButtonBox","props","PageContainer","swUpdate","getSwState","waiting","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","id","all","slice","keys","Object","module","exports","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","setInterval","console","log","update","Number","process","REACT_APP_UPDATE_INTERVAL","checkUpdates","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","Sentry","release","__VERSION__","dsn","ReactDOM","render","StrictMode","getElementById","URL","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cbf753e7.chunk.js","sourcesContent":["import React from 'react';\nimport { ButtonBox } from './elements';\n\ninterface IButtonProps {\n  color?: 'green' | 'red' | 'blue' | 'ghost';\n  onClick?: any;\n  disabled?: boolean;\n  type?: 'button' | 'submit';\n}\n\nexport const Button: React.FC<IButtonProps> = React.memo(({\n  color = 'green',\n  children,\n  onClick,\n  disabled,\n  type = 'button',\n}) => {\n  return (\n    <ButtonBox\n      type={type}\n      onClick={onClick}\n      color={color}\n      disabled={disabled}\n    >\n      {children}\n    </ButtonBox>\n  );\n});\n","import styled from 'styled-components';\n\nexport const TimerBox = styled.div`\n  display: flex;\n  height: 100%;\n`;\n\nexport const TimerContainer = styled.div`\n  margin: auto;\n  width: 450px;\n`;\n\nexport const StopwatchBox = styled.div`\n  font-size: 16px;\n  margin-top: 15px;\n`;\n\nexport const StopwatchValue = styled.span`\n  font-size: 20px;\n`;\n\nexport const SpinnerContainer = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { SW_UPDATE, SwUpdateAction } from '../../actions/sw-update';\n\nexport interface ISWState {\n  registration: any;\n}\n\nexport const initialState: ISWState = {\n  registration: null,\n};\n\nexport const sw = (\n  state = initialState,\n  action: SwUpdateAction\n): ISWState => {\n  switch (action.type) {\n    case SW_UPDATE:\n      return {\n        ...state,\n        registration: action.payload,\n      };\n    default:\n      return state\n  }\n};\n","import { CHANGE_INTERVAL, ChangeIntervalAction } from '../../actions/change-interval';\n\nexport interface ITimerState {\n  value: number;\n}\n\nexport const initialState: ITimerState = {\n  value: 1,\n};\n\nexport const timer = (\n  state = initialState,\n  action: ChangeIntervalAction\n): ITimerState => {\n  switch (action.type) {\n    case CHANGE_INTERVAL:\n      return {\n        ...state,\n        value: state.value += action.payload,\n      };\n    default:\n      return state\n  }\n};\n","import { combineReducers } from 'redux';\nimport { ISWState, sw } from './service-worker';\nimport { ITimerState, timer } from './timer';\n\nexport interface IState {\n  timer: ITimerState;\n  sw: ISWState;\n}\n\nconst reducers = {\n  timer,\n  sw,\n};\n\nexport const reducer = combineReducers<IState>({\n  ...reducers,\n});\n","import { createStore } from 'redux';\nimport { reducer } from './reducers';\n\nexport const store = createStore(reducer);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { changeInterval } from '../../../store/actions/change-interval';\nimport { IState } from '../../../store/reducers';\nimport { connect } from 'react-redux';\nimport { getCurrentInterval } from '../../../store/reducers/timer/selectors';\nimport { getSecondsDifferenceOfDate, loadableWithCatchError } from '../../../utils';\nimport { Button } from '../../components/common/button';\nimport { ButtonGroup, IntervalTitle, IntervalValue } from '../../components/common/elements';\nimport { SpinnerContainer, StopwatchBox, StopwatchValue, TimerBox, TimerContainer } from './elements';\nimport Loader from 'react-loader-spinner'\n\nconst Interval = loadableWithCatchError('components/interval');\n\nlet timerId: number;\n\ninterface ITimerProps {\n  currentInterval: number;\n  increaseInterval: () => void;\n  decreaseInterval: () => void;\n}\n\nexport const Timer: React.FC<ITimerProps> = React.memo(({currentInterval, increaseInterval, decreaseInterval}) => {\n  const [currentTime, setCurrentTime] = useState<number>(0);\n  const [startTime, setStartTime] = useState<number>(0);\n  const [isIntervalVisible, setVisible] = useState(false);\n  const isControlAvailable = currentInterval > 0;\n  const isStarted = startTime > 0;\n\n  const showInterval = useCallback(() => {\n    setVisible(true);\n  }, []);\n\n  const handleTick = useCallback(() => {\n    setCurrentTime(getSecondsDifferenceOfDate(startTime));\n  }, [startTime]);\n\n  const handleStart = useCallback(() => {\n    if (isControlAvailable) {\n      setStartTime(Date.now());\n    }\n  }, [isControlAvailable]);\n\n  const startTimer = useCallback(() => {\n    timerId = +setTimeout(() => {\n      clearTimeout(timerId);\n      handleTick();\n      startTimer();\n    }, currentInterval * 1000);\n  }, [currentInterval, handleTick]);\n\n  const handleStop = useCallback(() => {\n    setStartTime(0);\n    setCurrentTime(0);\n  }, []);\n\n  useEffect(() => {\n    if (startTime > 0) {\n      clearTimeout(timerId);\n      startTimer();\n    } else {\n      clearTimeout(timerId);\n    }\n  }, [startTime, currentInterval, startTimer]);\n\n  return (\n    <TimerBox>\n      <TimerContainer>\n        {isIntervalVisible ? (\n          <React.Suspense fallback={(\n            <SpinnerContainer>\n              <Loader\n                type=\"Circles\"\n                color=\"#00BFFF\"\n                height={40}\n                width={40}\n                timeout={3000} //3 secs\n\n              />\n            </SpinnerContainer>\n          )}>\n            <Interval\n              currentInterval={currentInterval}\n              increaseInterval={increaseInterval}\n              decreaseInterval={decreaseInterval}\n            />\n          </React.Suspense>\n        ) : (<IntervalTitle><Button color=\"ghost\" onClick={showInterval}>Интервал</Button> обновления секундомера: <IntervalValue>{currentInterval}</IntervalValue> сек.</IntervalTitle>)}\n        <StopwatchBox>\n          Секундомер: <StopwatchValue>{currentTime}</StopwatchValue> сек.\n        </StopwatchBox>\n        <ButtonGroup>\n          <Button disabled={!isControlAvailable || isStarted} onClick={handleStart}>Старт</Button>\n          <Button disabled={!isControlAvailable || !isStarted} onClick={handleStop}>Стоп</Button>\n        </ButtonGroup>\n      </TimerContainer>\n    </TimerBox>\n  );\n});\n\nconst mapStateToProps = (state: IState) => ({\n  currentInterval: getCurrentInterval(state)\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  decreaseInterval: () => dispatch(changeInterval(-1)),\n  increaseInterval: () => dispatch(changeInterval(1))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);\n","import { IState } from '../index';\nimport { ITimerState } from './index';\n\nexport const getTimerState = (state: IState): ITimerState => state.timer;\n\nexport const getCurrentInterval = (state: IState) => {\n  return getTimerState(state).value;\n};\n","import styled from 'styled-components';\n\nexport const ButtonGroup = styled.div`\n  margin-top: 20px;  \n  display: flex;\n  justify-content: space-between;\n  \n  > * {\n    width: calc(1/2 *100% - (1 - 1/2) *10px);\n  }\n`;\n\nexport const IntervalTitle = styled.div`\n  font-size: 16px;\n`;\n\nexport const IntervalValue = styled.span`\n  font-size: 18px;\n`;\n","export const CHANGE_INTERVAL = 'CHANGE_INTERVAL';\n\nexport interface ChangeIntervalAction {\n  type: typeof CHANGE_INTERVAL\n  payload: number\n}\n\nexport const changeInterval = (value: number): ChangeIntervalAction => {\n  return {\n    type: CHANGE_INTERVAL,\n    payload: value,\n  };\n};\n","import React from 'react';\nimport { store } from '../store';\nimport { getWaitingRegistration } from '../store/reducers/service-worker/selectors';\n\nexport const getSecondsDifferenceOfDate = (date: number): number => {\n  const diff = Date.now() - date;\n  return Math.floor(diff / 1000)\n};\n\nexport const loadableWithCatchError = path =>\n  React.lazy(async () => {\n    try {\n      const waitingRegistration = getWaitingRegistration(store.getState());\n      if (waitingRegistration) {\n        updateApp(waitingRegistration);\n      } else {\n        return await import(`../../src/view/${path}`);\n      }\n    } catch (e) {\n      return null;\n    }\n  });\n\nexport const updateApp = (waitingRegistration) => {\n  waitingRegistration.postMessage({ type: 'SKIP_WAITING' });\n  waitingRegistration.addEventListener('statechange', e => {\n    // @ts-ignore\n    if (e.target.state === 'activated') {\n      window.location.reload();\n    }\n  });\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport IdleTimer from 'react-idle-timer'\nimport { store } from '../store';\nimport { getWaitingRegistration } from '../store/reducers/service-worker/selectors';\nimport { updateApp } from '../utils';\nimport Timer from './containers/timer';\nimport { PageContainer } from './elements';\n\nconst idleMinutes = 1;\n\nfunction App() {\n  const onIdle = () => {\n    const waitingRegistration = getWaitingRegistration(store.getState());\n    if (waitingRegistration) {\n      updateApp(waitingRegistration);\n    }\n  };\n\n  return (\n    <Provider store={store}>\n      <IdleTimer\n        element={document}\n        onIdle={onIdle}\n        debounce={250}\n        timeout={1000 * 60 * idleMinutes} />\n      <PageContainer>\n        <Timer />\n      </PageContainer>\n    </Provider>\n  );\n}\n\nexport default App;\n","import styled from 'styled-components';\n\nconst white = '#fff';\nconst green = '#6ccd94';\nconst blue = '#439aff';\nconst red = '#f64d4d';\n\nexport const ButtonBox = styled('button')`\n  width: 100%;\n  padding: 9px 20px;\n  color: ${white};\n  font-size: 16px;\n  background-color: transparent;\n  border: 0;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: all .3s;\n\n  &:focus {\n    outline: 0;\n  }\n\n  background: ${(props) =>\n    props.color === 'green' ?\n      green :\n        props.color === 'blue' ?\n          blue :\n          props.color === 'red' ? red : ''\n  };\n  \n  ${(props) => props.color === 'ghost' && `\n    color: ${blue};\n    width: auto;\n    padding: 0;\n  `}\n\n  ${(props) =>\n  props.disabled &&\n  `\n    cursor: default;\n    opacity: .5;\n  `}\n`;\n","import styled from 'styled-components';\n\nexport const PageContainer = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 1210px;\n  margin: 0 auto;\n  flex: 0;\n  box-sizing: border-box;\n  height: 100vh;\n`;\n","export const SW_UPDATE = 'SW_UPDATE';\n\nexport interface SwUpdateAction {\n  type: typeof SW_UPDATE,\n  payload: number\n}\n\nexport const swUpdate = (registration: any): SwUpdateAction => {\n  return {\n    type: SW_UPDATE,\n    payload: registration,\n  };\n};\n","import { IState } from '../index';\nimport { ISWState } from './index';\n\nexport const getSwState = (state: IState): ISWState => state.sw;\n\nexport const getWaitingRegistration = (state: IState) => {\n  const registration = getSwState(state).registration;\n  return registration ? registration.waiting : null;\n};\n","var map = {\n\t\"./app\": [\n\t\t27\n\t],\n\t\"./app.test\": [\n\t\t52,\n\t\t1,\n\t\t2\n\t],\n\t\"./app.test.tsx\": [\n\t\t52,\n\t\t1,\n\t\t2\n\t],\n\t\"./app.tsx\": [\n\t\t27\n\t],\n\t\"./components/common/button\": [\n\t\t10\n\t],\n\t\"./components/common/button/\": [\n\t\t10\n\t],\n\t\"./components/common/button/elements\": [\n\t\t28\n\t],\n\t\"./components/common/button/elements.tsx\": [\n\t\t28\n\t],\n\t\"./components/common/button/index\": [\n\t\t10\n\t],\n\t\"./components/common/button/index.tsx\": [\n\t\t10\n\t],\n\t\"./components/common/elements\": [\n\t\t17\n\t],\n\t\"./components/common/elements.tsx\": [\n\t\t17\n\t],\n\t\"./components/interval\": [\n\t\t34,\n\t\t0\n\t],\n\t\"./components/interval/\": [\n\t\t34,\n\t\t0\n\t],\n\t\"./components/interval/elements\": [\n\t\t49,\n\t\t3\n\t],\n\t\"./components/interval/elements.tsx\": [\n\t\t49,\n\t\t3\n\t],\n\t\"./components/interval/index\": [\n\t\t34,\n\t\t0\n\t],\n\t\"./components/interval/index.tsx\": [\n\t\t34,\n\t\t0\n\t],\n\t\"./containers/timer\": [\n\t\t16\n\t],\n\t\"./containers/timer/\": [\n\t\t16\n\t],\n\t\"./containers/timer/elements\": [\n\t\t11\n\t],\n\t\"./containers/timer/elements.tsx\": [\n\t\t11\n\t],\n\t\"./containers/timer/index\": [\n\t\t16\n\t],\n\t\"./containers/timer/index.tsx\": [\n\t\t16\n\t],\n\t\"./elements\": [\n\t\t29\n\t],\n\t\"./elements.tsx\": [\n\t\t29\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 62;\nmodule.exports = webpackAsyncContext;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction checkUpdates(registration) {\n  setInterval(() => {\n    console.log('Check service worker updates');\n    registration.update();\n  }, Number(process.env.REACT_APP_UPDATE_INTERVAL) || 5000);\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      checkUpdates(registration);\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport './index.css';\nimport { store } from './store';\nimport { swUpdate } from './store/actions/sw-update';\nimport App from './view/app';\nimport * as serviceWorker from './serviceWorker';\n\nSentry.init({\n  release: `react@${__VERSION__}`,\n  dsn: 'https://c216cd488b2c40cbb0e2bcdff892a595@o387706.ingest.sentry.io/5223409',\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register({\n  onUpdate: registration => store.dispatch(swUpdate(registration)),\n});\n"],"sourceRoot":""}